#include <pthread.h>
#include <semaphore.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <unistd.h>
#include <string.h>

#define MAX_BUFFER_SIZE 10

int prodNum, conNum, buffer_size, limit;
sem_t empty;
sem_t full;
int count = 0;
int buffer[MAX_BUFFER_SIZE];
pthread_spinlock_t spinlock; // Declaration of spinlock

int consumer_ids[MAX_BUFFER_SIZE]; // Array to store consumer IDs

void *producer(void *param)
{  
    while(1) {
        int item = rand() % 50;
        sem_wait(&empty);
        pthread_spin_lock(&spinlock); // Lock the spinlock
        buffer[count] = item;
        count++;
        pthread_spin_unlock(&spinlock); // Unlock the spinlock
        sem_post(&full);
        sleep(1);
    }
}

void *consumer(void *param)
{   
    int consumer_id = *((int *)param);
    while(1) {
        int item;
        sem_wait(&full);
        pthread_spin_lock(&spinlock); // Lock the spinlock
        item = buffer[count - 1];
        count--;
        pthread_spin_unlock(&spinlock); // Unlock the spinlock
        sem_post(&empty);

        // Print the consumer-friendly ID along with the buffered integer
        printf("%d, %d\n", item, consumer_id);
        sleep(2);
    }
}

int main(int argc, char *argv[])
{   
    srand(time(NULL));

    if (argc == 5) {
        buffer_size = atoi(argv[1]);
        prodNum = atoi(argv[2]);
        conNum = atoi(argv[3]);
        limit = atoi(argv[4]);
    } else {
        printf("Buffer Size: ");
        scanf("%d", &buffer_size);

        printf("Num of Producers: ");
        scanf("%d", &prodNum);

        printf("Num of Consumers: ");
        scanf("%d", &conNum);

        printf("Upper Limit: ");
        scanf("%d", &limit);
        printf("\n");
    }

    pthread_t pro[prodNum], con[conNum];
    pthread_spin_init(&spinlock, PTHREAD_PROCESS_SHARED); // Initialization of spinlock

    sem_init(&empty, 0, buffer_size);
    sem_init(&full, 0, 0);

    // Initialize consumer IDs in the array
    for (int i = 0; i < conNum; ++i) {
        consumer_ids[i] = i; // Assign unique IDs to consumers
    }

    for(int i = 0; i < prodNum; i++) {
        pthread_create(&pro[i], NULL, producer, (void *)&i);
    }

    for(int j = 0; j < conNum; j++) {
        pthread_create(&con[j], NULL, consumer, (void *)&consumer_ids[j]);
    }
    
    for(int i = 0; i < prodNum; i++) {
        pthread_join(pro[i], NULL);
    }

    for(int j = 0; j < conNum; j++) {
        pthread_join(con[j], NULL);
    }
    
    pthread_spin_destroy(&spinlock); // Destroy the spinlock
    sem_destroy(&empty);
    sem_destroy(&full);

    return 0;
}
